from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import os
import time


# Configurar as op√ß√µes do Chrome
user_home = os.path.expanduser("~")
chrome_profile = os.path.join(
    user_home, "Library", "Application Support", "Google", "Chrome", "Default"
)

chrome_options = Options()
chrome_options.add_argument(f"user-data-dir={chrome_profile}")

# Adicionar configura√ß√µes para for√ßar o download de PDFs
chrome_options.add_experimental_option(
    "prefs", {
        "download.prompt_for_download": False,
        "download.automatically_downloads": True,
        "plugins.disabled": ["Chrome PDF Viewer"],
        "download.directory_upgrade": True,
        "plugins.always_open_pdf_externally": True,
        "download.default_directory": os.path.join(user_home, "Downloads"),  # Diret√≥rio de download padr√£o
    }
)

# Iniciar o driver do Chrome#
#driver = webdriver.Chrome(options=chrome_options)

def clicar_botao_generico(driver, botao_id, nome_botao):
    try:
        botao = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, botao_id))
        )
        print(f"Bot√£o '{nome_botao}' encontrado. Clicando...")
        botao.click()
        return True
    except TimeoutException:
        print(f"N√£o foi poss√≠vel encontrar o bot√£o '{nome_botao}'.")
        return False
    except Exception as e:
        print(f"Erro ao clicar no bot√£o '{nome_botao}': {str(e)}")
        return False

# Fun√ß√£o para lidar com alertas
def handle_alert(driver):
    try:
        alert = WebDriverWait(driver, 5).until(EC.alert_is_present())
        alert_text = alert.text
        print(f"Alerta encontrado: {alert_text}")
        alert.accept()
        return True
    except TimeoutException:
        return False


def tentar_login_automatico(driver, usuario, senha):
    try:
        # Esperar pelo campo de usu√°rio
        if driver.find_element(By.ID, "username"):
            campo_usuario = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "username"))
            )
        elif driver.find_element(By.ID, "txtUsuario"):
            campo_usuario = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "txtUsuario"))
            )
        else:
            print("N√£o foi poss√≠vel encontrar o campo de usu√°rio.")
            return False
        campo_usuario.clear()
        campo_usuario.send_keys(usuario)

        # Encontrar e preencher o campo de senha
        if driver.find_element(By.ID, "password"):
            campo_senha = driver.find_element(By.ID, "password")
        elif driver.find_element(By.ID, "pwdSenha"):
            campo_senha = driver.find_element(By.ID, "pwdSenha")
        else:
            print("N√£o foi poss√≠vel encontrar o campo de senha.")
            return False
        campo_senha.clear()
        campo_senha.send_keys(senha)



        # Clicar no bot√£o de login
        if driver.find_element(By.ID, "kc-login"):
            botao_login = driver.find_element(By.ID, "kc-login")
        elif driver.find_element(By.ID, "sbmEntrar"):
            botao_login = driver.find_element(By.ID, "sbmEntrar")
        else:
            print("N√£o foi poss√≠vel encontrar o bot√£o de login.")
            return False
        botao_login.click()

        alert = WebDriverWait(driver, 10).until(EC.alert_is_present())
        alert.accept()
        botao_login.click()

        # Esperar pela p√°gina carregar ap√≥s o login
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "txtNumProcessoPesquisaRapida"))
        )

        print("Login autom√°tico bem-sucedido.")
        return True
    except Exception as e:
        print(f"Erro no login autom√°tico: {str(e)}")
        return False


# Fun√ß√£o para pesquisar um processo
def pesquisar_processo(driver, numero_processo):
    try:
        campo_pesquisa = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "txtNumProcessoPesquisaRapida"))
        )
        campo_pesquisa.clear()
        campo_pesquisa.send_keys(numero_processo)
        campo_pesquisa.send_keys(webdriver.Keys.RETURN)
        print(f"Pesquisando processo: {numero_processo}")
    except TimeoutException:
        print("N√£o foi poss√≠vel encontrar o campo de pesquisa.")


# Fun√ß√£o para clicar no bot√£o de download
def clicar_botao_download(driver):
    try:
        botao_download = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "btnDownloadCompletoRS"))
        )
        print("Bot√£o de se√ßao gerar download encontrado. Clicando...")
        botao_download.click()
    except TimeoutException:
        print("N√£o foi poss√≠vel encontrar o bot√£o de se√ßao gerar download.")
    except Exception as e:
        print(f"Erro ao clicar no bot√£o de se√ßao gerar download: {str(e)}")


# Fun√ß√£o para clicar no bot√£o "Gerar"
def clicar_botao_gerar(driver):
    return clicar_botao_generico(driver, "btnGerar", "Gerar")


# Fun√ß√£o para esperar a mudan√ßa na p√°gina
def esperar_arquivo_pronto(driver):
    print("Aguardando a gera√ß√£o do arquivo...")
    start_time = time.time()
    timeout = 120  # 2 minutos

    while time.time() - start_time < timeout:
        try:
            if clicar_botao_generico(driver, "lblBaixar", "Baixar"):
                print("Arquivo gerado e pronto para download.")
                return True

            if clicar_botao_generico(driver, "btnGerar", "Gerar"):
                print("Aguardando o arquivo ficar pronto")
                return False

            time.sleep(2)
        except Exception as e:
            print(f"Erro durante a verifica√ß√£o: {str(e)}")

    print("Tempo limite excedido. O arquivo n√£o foi gerado ap√≥s 2 minutos.")
    return False

def processar_numero(driver, numero_processo):
    print(f"\nProcessando n√∫mero: {numero_processo}")
    max_tentativas = 3
    tentativa = 0

    while tentativa < max_tentativas:
        tentativa += 1
        print(f"Tentativa {tentativa} de {max_tentativas}")

        pesquisar_processo(driver, numero_processo)
        time.sleep(3)
        clicar_botao_download(driver)
        time.sleep(3)

        if not clicar_botao_gerar(driver):
            print("Bot√£o Gerar n√£o encontrado, arquivo pode j√° estar pronto")
            if clicar_botao_baixar(driver):
                print(f"Processo {numero_processo} conclu√≠do. O arquivo deve estar sendo baixado.")
                return
        else:
            print("Arquivo n√£o estava pronto, aguardando gera√ß√£o...")
            if esperar_arquivo_pronto(driver):
                print(f"Processo {numero_processo} conclu√≠do. O arquivo deve estar sendo baixado.")
                return

        print(f"Falha na tentativa {tentativa} para o processo {numero_processo}.")

    print(f"N√£o foi poss√≠vel baixar o arquivo para o processo {numero_processo} ap√≥s {max_tentativas} tentativas.")

# Adicione esta fun√ß√£o
def clicar_botao_baixar(driver):
    return clicar_botao_generico(driver, "lblBaixar", "Baixar")

# Lista de n√∫meros de processos






def EPROC_Download(numeros_processos: list):

    """### üìù EPROC_Download
            Initiates the download process for a list of process numbers from the EPROC system.

            #### üñ•Ô∏è Parameters
                - `numeros_processos` (`list`): A list of process numbers to be downloaded. Each process number should be a string.

            #### üîÑ Returns
                - `bool`: Returns `True` when all processes have been attempted for download.

            #### ‚ö†Ô∏è Raises
                - `Exception`: If there is an issue with the login process or if the download fails after maximum attempts.

            #### üìå Notes
                - Ensure that the user credentials are correctly set before running the function.
                - The function assumes that the necessary web driver and other dependencies are properly configured.
                - The function will prompt for manual login if automatic login fails.

            #### üí° Example

            >>> EPROC_Download(["50008601220254047106", "50008515020254047106"])
            True
    """
    driver = webdriver.Chrome(options=chrome_options)
    # Abrir o site que requer autentica√ß√£o
    driver.get("https://eproc.jfrs.jus.br/eprocV2/")

 #   remaining = [x for x in numeros_processos if x not in cleaningDownloaded()]
    # Tentar login autom√°tico
    usuario = "crmrs035013"  # Substitua com seu usu√°rio real
    senha = "*Andi009134"  # Substitua com sua senha real
    presence = lambda x:os.path.exists(os.path.join(".", x))

    if tentar_login_automatico(driver,  usuario, senha):
        print("Login autom√°tico bem-sucedido. Continuando com o processamento.")

    # Esperar um pouco para a p√°gina carregar
    time.sleep(3)

    # Verificar se estamos na p√°gina correta
    if "painel_perito_listar" in driver.current_url:
        print("Login bem-sucedido. Estamos na p√°gina correta.")
    else:
        print(
            "N√£o foi poss√≠vel fazer login automaticamente. Por favor, fa√ßa login manualmente."
        )
        input("Pressione Enter depois de fazer login manualmente...")

    # Iterar sobre a lista de n√∫meros de processos
    for numero in numeros_processos:
        if not presence(numero):
            processar_numero(driver, numero)
            time.sleep(5)  # Pequena pausa entre processos
        else:
            print(f"Arquivo {numero} j√° existe. Pulando...")

    print("Todos os processos foram conclu√≠dos.")

    # Manter o navegador aberto at√© que o usu√°rio decida fechar
    input("Pressione Enter para fechar o navegador...")

    # Fechar o navegador quando terminar
    driver.quit()
    return True

