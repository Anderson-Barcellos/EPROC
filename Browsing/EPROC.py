"""
üèõÔ∏è M√≥dulo EPROC - Automa√ß√£o de Download de Processos Judiciais

M√≥dulo respons√°vel pela automa√ß√£o do download de processos do sistema EPROC
do Tribunal Regional Federal da 4¬™ Regi√£o (TRF4).
"""

# Importa√ß√µes
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
import os
import time
from selenium.webdriver.common.keys import Keys

# ===== CONFIGURA√á√ïES GLOBAIS =====

# Configurar as op√ß√µes do Chrome
user_home = os.path.expanduser("~")
chrome_profile = os.path.join(
    user_home, "Library", "Application Support", "Google", "Chrome", "Default"
)

chrome_options = Options()
chrome_options.add_argument(f"user-data-dir={chrome_profile}")

# Adicionar configura√ß√µes para for√ßar o download de PDFs
chrome_options.add_experimental_option(
    "prefs", {
        "download.prompt_for_download": False,
        "download.automatically_downloads": True,
        "plugins.disabled": ["Chrome PDF Viewer"],
        "download.directory_upgrade": True,
        "plugins.always_open_pdf_externally": True,
        "download.default_directory": os.path.join("D:\\OneDrive\\√Årea de Trabalho\\Complementares\\Processos")
          # Diret√≥rio de download padr√£o
    }
)

# ===== FUN√á√ïES AUXILIARES =====

def clicar_botao_generico(driver, botao_id: str, nome_botao: str) -> bool:
    """
    üñ±Ô∏è Clicador Gen√©rico de Bot√µes

    Fun√ß√£o gen√©rica para clicar em bot√µes do sistema EPROC usando ID.

    üîß Parameters:
    :param botao_id: üÜî ID do elemento bot√£o no HTML
    :type botao_id: str
    :param nome_botao: üìõ Nome descritivo do bot√£o para logs
    :type nome_botao: str
    :return: ‚úÖ True se conseguiu clicar, False caso contr√°rio
    :rtype: bool
    :raises TimeoutException: ‚è±Ô∏è Se o bot√£o n√£o for encontrado no tempo limite
    :raises Exception: ‚ùå Se houver erro durante o clique

    üéØ Example:
    ```python
        # Clicar no bot√£o de download
        sucesso = clicar_botao_generico("btnDownload", "Download")
        if sucesso:
            print("‚úÖ Bot√£o clicado com sucesso")
        else:
            print("‚ùå Falha ao clicar no bot√£o")
    ```
    """
    try:
        botao = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, botao_id))
        )
        print(f"Bot√£o '{nome_botao}' encontrado. Clicando...")
        botao.click()
        return True
    except TimeoutException:
        print(f"N√£o foi poss√≠vel encontrar o bot√£o '{nome_botao}'.")
        return False
    except Exception as e:
        raise Exception(f"Erro ao clicar no bot√£o '{nome_botao}': {str(e)}")


def handle_alert(driver) -> bool:
    """
    üö® Gerenciador de Alertas do Navegador

    Fun√ß√£o para detectar e aceitar alertas JavaScript do navegador.

    üîß Parameters:
    :return: ‚úÖ True se encontrou e aceitou alerta, False caso contr√°rio
    :rtype: bool
    :raises TimeoutException: ‚è±Ô∏è Se n√£o houver alerta presente

    üéØ Example:
    ```python
        # Verificar se h√° alerta ap√≥s uma a√ß√£o
        if handle_alert():
            print("üö® Alerta foi tratado")
        else:
            print("‚úÖ Nenhum alerta encontrado")
    ```
    """
    try:
        alert = WebDriverWait(driver, 5).until(EC.alert_is_present())
        alert_text = alert.text
        print(f"Alerta encontrado: {alert_text}")
        alert.accept()
        return True
    except TimeoutException:
        return False


# ===== FUN√á√ïES DE AUTENTICA√á√ÉO =====

def tentar_login_automatico(driver_instance: webdriver.Chrome, usuario: str, senha: str, tempo_espera: int = 5) -> bool:
    """
    üîê Autenticador Autom√°tico EPROC

    Fun√ß√£o para realizar login autom√°tico no sistema EPROC, suportando tanto
    formul√°rio nativo quanto SSO/Keycloak.

    üîß Parameters:
    :param driver_instance: üåê Inst√¢ncia do WebDriver configurada
    :type driver_instance: webdriver.Chrome
    :param usuario: üë§ Nome de usu√°rio para login
    :type usuario: str
    :param senha: üîë Senha do usu√°rio
    :type senha: str
    :param tempo_espera: ‚è±Ô∏è Timeout em segundos (padr√£o: 15)
    :type tempo_espera: int
    :return: ‚úÖ True se login bem-sucedido, False caso contr√°rio
    :rtype: bool
    :raises TimeoutException: ‚è±Ô∏è Se elementos de login n√£o forem encontrados
    :raises Exception: ‚ùå Se houver erro durante o processo de login

    üéØ Example:
    ```python
        # Login autom√°tico no sistema
        if tentar_login_automatico(driver, "usuario123", "senha456"):
            print("üéâ Login realizado com sucesso")
        else:
            print("‚ùå Falha no login autom√°tico")
    ```
    """
    espera = WebDriverWait(driver_instance, tempo_espera)

    # Tentar entrar no iframe SSO se existir
    try:
        espera.until(EC.frame_to_be_available_and_switch_to_it((By.ID, "ssoFrame")))
    except TimeoutException:
        pass

    # Formul√°rios poss√≠veis de login
    formularios = [
        {"user": (By.ID, "txtUsuario"), "pwd": (By.ID, "pwdSenha"), "btn": (By.ID, "sbmEntrar")},
        {"user": (By.ID, "username"), "pwd": (By.ID, "password"), "btn": (By.ID, "kc-login")},
    ]

    # Identificar formul√°rio presente
    for form in formularios:
        try:
            campo_usuario = espera.until(EC.presence_of_element_located(form["user"]))
            campo_senha = driver_instance.find_element(*form["pwd"])
            botao_login = driver_instance.find_element(*form["btn"])
            break
        except TimeoutException:
            continue
    else:
        raise Exception("Nenhum formul√°rio de login reconhecido foi encontrado")

    # Preencher e submeter formul√°rio
    campo_usuario.clear()
    campo_usuario.send_keys(usuario)
    campo_senha.clear()
    campo_senha.send_keys(senha)
    botao_login.click()

    # Tratar alerta opcional
    try:
        alerta = espera.until(EC.alert_is_present())
        alerta.accept()
    except TimeoutException:
        pass

    # Voltar ao conte√∫do principal
    driver_instance.switch_to.default_content()

    # Verificar sucesso do login
    try:
        espera.until(EC.presence_of_element_located((By.ID, "txtNumProcessoPesquisaRapida")))
        print("Login autom√°tico bem-sucedido.")
        return True
    except TimeoutException:
        print("Login provavelmente falhou ‚Äì elemento p√≥s-login n√£o encontrado.")
        return False


# ===== FUN√á√ïES DE NAVEGA√á√ÉO E PESQUISA =====

def pesquisar_processo(driver, numero_processo: str) -> None:
    """
    üîç Pesquisador de Processos EPROC

    Fun√ß√£o para pesquisar um processo espec√≠fico no sistema EPROC.

    üîß Parameters:
    :param numero_processo: üìã N√∫mero do processo judicial
    :type numero_processo: str
    :raises TimeoutException: ‚è±Ô∏è Se campo de pesquisa n√£o for encontrado
    :raises Exception: ‚ùå Se houver erro durante a pesquisa

    üéØ Example:
    ```python
        # Pesquisar processo espec√≠fico
        pesquisar_processo("5008676-91.2024.4.04.7102")
        print("üîç Processo pesquisado com sucesso")
    ```
    """
    try:
        campo_pesquisa = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "txtNumProcessoPesquisaRapida"))
        )
        campo_pesquisa.clear()
        campo_pesquisa.send_keys(numero_processo)
        campo_pesquisa.send_keys(webdriver.Keys.RETURN)
        print(f"Pesquisando processo: {numero_processo}")
    except TimeoutException:
        raise Exception("N√£o foi poss√≠vel encontrar o campo de pesquisa")


# ===== FUN√á√ïES DE DOWNLOAD =====

def clicar_botao_download(driver) -> None:
    """
    üì• Iniciador de Download de Processo

    Fun√ß√£o para clicar no bot√£o de iniciar download completo do processo.

    üì• Parameters:
    :raises TimeoutException: ‚è±Ô∏è Se bot√£o de download n√£o for encontrado
    :raises Exception: ‚ùå Se houver erro durante o clique

    üìÅ Example:
    ```python
        # Iniciar processo de download
        clicar_botao_download()
        print("üì• Download iniciado")
    ```
    """
    try:
        botao_download = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "btnDownloadCompletoRS"))
        )
        print("Bot√£o de se√ß√£o gerar download encontrado. Clicando...")
        botao_download.click()
    except TimeoutException:
        raise Exception("N√£o foi poss√≠vel encontrar o bot√£o de se√ß√£o gerar download")


def clicar_botao_gerar(driver) -> bool:
    """
    ‚öôÔ∏è Gerador de Arquivo de Download

    Fun√ß√£o para clicar no bot√£o "Gerar" do sistema de download.

    ‚öôÔ∏è Parameters:
    :return: ‚úÖ True se conseguiu clicar, False caso contr√°rio
    :rtype: bool

    üéØ Example:
    ```python
        # Gerar arquivo para download
        if clicar_botao_gerar():
            print("‚öôÔ∏è Gera√ß√£o iniciada")
    ```
    """
    return clicar_botao_generico(driver, "btnGerar", "Gerar")


def clicar_botao_baixar(driver) -> bool:
    """
    üíæ Baixador de Arquivo Gerado

    Fun√ß√£o para clicar no bot√£o "Baixar" ap√≥s arquivo estar pronto.

    üíæ Parameters:
    :return: ‚úÖ True se conseguiu clicar, False caso contr√°rio
    :rtype: bool

    üéØ Example:
    ```python
        # Baixar arquivo gerado
        if clicar_botao_baixar():
            print("üíæ Download iniciado")
    ```
    """
    return clicar_botao_generico(driver, "lblBaixar", "Baixar")


def esperar_arquivo_pronto(driver) -> bool:
    """
    ‚è≥ Monitor de Status de Gera√ß√£o

    Fun√ß√£o para aguardar a gera√ß√£o completa do arquivo de download.

    ‚è≥ Parameters:
    :return: ‚úÖ True se arquivo ficou pronto, False se timeout
    :rtype: bool
    :raises Exception: ‚ùå Se houver erro durante verifica√ß√£o

    üéØ Example:
    ```python
        # Aguardar arquivo ficar pronto
        if esperar_arquivo_pronto():
            print("‚úÖ Arquivo pronto para download")
        else:
            print("‚è±Ô∏è Timeout na gera√ß√£o do arquivo")
    ```
    """
    print("Aguardando a gera√ß√£o do arquivo...")
    start_time = time.time()
    timeout = 120  # 2 minutos

    while time.time() - start_time < timeout:
        try:
            if clicar_botao_generico(driver, "lblBaixar", "Baixar"):
                print("Arquivo gerado e pronto para download.")
                return True

            if clicar_botao_generico(driver, "btnGerar", "Gerar"):
                print("Aguardando o arquivo ficar pronto")
                return False

            time.sleep(2)
        except Exception as e:
            raise Exception(f"Erro durante a verifica√ß√£o: {str(e)}")

    print("Tempo limite excedido. O arquivo n√£o foi gerado ap√≥s 2 minutos.")
    return False


# ===== FUN√á√ïES DE PROCESSAMENTO =====

def processar_numero(driver, numero_processo: str) -> None:
    """
    üîÑ Processador Completo de Processo

    Fun√ß√£o para processar completamente um n√∫mero de processo, incluindo
    pesquisa, download e m√∫ltiplas tentativas em caso de falha.

    üîÑ Parameters:
    :param numero_processo: üìã N√∫mero do processo a ser processado
    :type numero_processo: str
    :raises Exception: ‚ùå Se todas as tentativas falharem

    üéØ Example:
    ```python
        # Processar um processo espec√≠fico
        processar_numero("5008676-91.2024.4.04.7102")
        print("üéâ Processo conclu√≠do")
    ```
    """
    print(f"\nProcessando n√∫mero: {numero_processo}")
    max_tentativas = 3
    tentativa = 0

    while tentativa < max_tentativas:
        tentativa += 1
        print(f"Tentativa {tentativa} de {max_tentativas}")

        try:
            pesquisar_processo(driver, numero_processo)
            time.sleep(3)
            clicar_botao_download(driver)
            time.sleep(3)

            if not clicar_botao_gerar(driver):
                print("Bot√£o Gerar n√£o encontrado, arquivo pode j√° estar pronto")
                if clicar_botao_baixar(driver):
                    print(f"Processo {numero_processo} conclu√≠do. O arquivo deve estar sendo baixado.")
                    return
            else:
                print("Arquivo n√£o estava pronto, aguardando gera√ß√£o...")
                if esperar_arquivo_pronto(driver):
                    print(f"Processo {numero_processo} conclu√≠do. O arquivo deve estar sendo baixado.")
                    return

            print(f"Falha na tentativa {tentativa} para o processo {numero_processo}.")
        except Exception as e:
            print(f"Erro na tentativa {tentativa}: {str(e)}")

    raise Exception(f"N√£o foi poss√≠vel baixar o arquivo para o processo {numero_processo} ap√≥s {max_tentativas} tentativas")


def cleaning_downloaded(driver) -> list:
    """
    üßπ Limpador de Downloads Existentes

    Fun√ß√£o para verificar quais processos j√° foram baixados na pasta Downloads.

    üßπ Parameters:
    :return: üìã Lista de n√∫meros de processos j√° baixados
    :rtype: list[str]
    :raises FileNotFoundError: üìÅ Se pasta Downloads n√£o existir
    :raises Exception: ‚ùå Se houver erro ao acessar arquivos

    üéØ Example:
    ```python
        # Verificar downloads existentes
        ja_baixados = cleaning_downloaded()
        print(f"üìä {len(ja_baixados)} processos j√° baixados")
    ```
    """
    try:
        download_folder = os.path.join("C:/Users/Anders", "Downloads")
        if not os.path.exists(download_folder):
            raise FileNotFoundError(f"Pasta de downloads n√£o encontrada: {download_folder}")

        files = os.listdir(download_folder)
        file_list = []

        for file in files:
            if file.endswith(".PDF"):
                file_parts = file.split("-")
                if len(file_parts) > 1:
                    file_list.append(file_parts[1])

        return file_list
    except Exception as e:
        raise Exception(f"Erro ao verificar downloads existentes: {str(e)}")


# ===== FUN√á√ÉO PRINCIPAL =====

def EPROC_Download(numeros_processos: list[str]) -> bool:
    """
    üöÄ Orquestrador Principal de Downloads

    Fun√ß√£o principal para automatizar o download de m√∫ltiplos processos
    do sistema EPROC com login autom√°tico e verifica√ß√£o de duplicatas.

    üöÄ Parameters:
    :param numeros_processos: üìã Lista de n√∫meros de processos para download
    :type numeros_processos: list[str]
    :return: ‚úÖ True se todos os processos foram processados
    :rtype: bool
    :raises Exception: ‚ùå Se houver erro cr√≠tico durante execu√ß√£o

    üéØ Example:
    ```python
        # Processar lista de processos
        processos = ["5008676-91.2024.4.04.7102", "5003858-62.2025.4.04.7102"]
        if Download_Processos(processos):
            print("üéâ Todos os processos foram processados")
    ```
    """
    try:
        # Abrir o site
        driver = webdriver.Chrome(options=chrome_options)
        driver.get("https://eproc.jfrs.jus.br/eprocV2/")

        # Verificar downloads existentes

        # Credenciais (em produ√ß√£o, usar vari√°veis de ambiente)
        usuario = "crmrs035013"
        senha = "*Andi009134"

        # Fun√ß√£o para verificar exist√™ncia de arquivo
        def file_exists(filename: str) -> bool:
            return os.path.exists(os.path.join(".", filename))

        # Login autom√°tico
        if tentar_login_automatico(driver, usuario, senha):
            print("Login autom√°tico bem-sucedido. Continuando com o processamento.")
        else:
            print("N√£o foi poss√≠vel fazer login automaticamente. Por favor, fa√ßa login manualmente.")
            input("Pressione Enter depois de fazer login manualmente...")

        time.sleep(3)

        # Verificar p√°gina correta
        if "painel_perito_listar" in driver.current_url:
            print("Login bem-sucedido. Estamos na p√°gina correta.")
        else:
            print("Verifica√ß√£o manual de login necess√°ria.")
            input("Pressione Enter ap√≥s confirmar que est√° logado...")

        # Processar cada n√∫mero
        for numero in numeros_processos:
            processar_numero(driver, numero)
            time.sleep(5)


        print("Todos os processos foram conclu√≠dos.")
        input("Pressione Enter para fechar o navegador...")

        return True

    except Exception as e:
        print(f"‚ùå Erro cr√≠tico durante execu√ß√£o: {e}")
        raise e
    finally:
        driver.quit()

